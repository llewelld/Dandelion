/*
 * DandeClient.java
 *
 * Created on 20 July 2008, 01:47
 */

package uk.co.flypig.dandelion;

import uk.co.flypig.dandelion.DlClient;
import javax.swing.*;

/**
 * Dandelion test client, using DlClient.java
 * @author flypig
 */
public class DandeClient extends javax.swing.JFrame {
  /**
   * The magnitude used to shake nodes.
   */
  private static final double ARRANGESHAKESCALE = 5.0;
  /**
   * The DlClient instance used to communicate with the Dandelion server.
   */
  DlClient dlClient = null;
  /**
   * The numerical model used to control the port spinner widget.
   */
  SpinnerNumberModel portModel;
  /**
   * The name of the next node to be added using the Quick Node button. Incremented after each addition.
   */
  Integer quickNodeCount;
  
  /** Creates new form DandeClient */
  public DandeClient () {
    try {
      // Try to use the system look and feel
      UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName ());
    } catch (Exception e) {
      // If it doesn't work we're just not bothered
    }
    initComponents ();
    address.setText ("localhost");
    portModel = new SpinnerNumberModel (4972, 0, 170000, 1);
    dlClient = null;
    quickNodeCount = 0;
    port.setModel (portModel);
    port.setEditor (new JSpinner.NumberEditor (port, "#"));
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    address = new javax.swing.JTextField();
    port = new javax.swing.JSpinner();
    connect = new javax.swing.JButton();
    disconnect = new javax.swing.JButton();
    nodeName = new javax.swing.JTextField();
    subNode = new javax.swing.JButton();
    addNode = new javax.swing.JButton();
    nodeTo = new javax.swing.JTextField();
    nodeFrom = new javax.swing.JTextField();
    bidirected = new javax.swing.JCheckBox();
    subLink = new javax.swing.JButton();
    addLink = new javax.swing.JButton();
    clear = new javax.swing.JButton();
    quickNode = new javax.swing.JButton();
    quickLink = new javax.swing.JButton();
    quit = new javax.swing.JButton();
    shakeNode = new javax.swing.JButton();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Dandelion Test Client");
    setName("DandelionClient"); // NOI18N

    port.setDoubleBuffered(true);
    port.setValue(4972);

    connect.setText("Connect");
    connect.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        connectActionPerformed(evt);
      }
    });

    disconnect.setText("Disconnect");
    disconnect.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        disconnectActionPerformed(evt);
      }
    });

    subNode.setText("Remove");
    subNode.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        subNodeActionPerformed(evt);
      }
    });

    addNode.setText("Add");
    addNode.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addNodeActionPerformed(evt);
      }
    });

    bidirected.setSelected(true);
    bidirected.setText("Bidirected");
    bidirected.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    bidirected.setMargin(new java.awt.Insets(0, 0, 0, 0));

    subLink.setText("Remove");
    subLink.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        subLinkActionPerformed(evt);
      }
    });

    addLink.setText("Add");
    addLink.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addLinkActionPerformed(evt);
      }
    });

    clear.setText("Clear All");
    clear.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        clearActionPerformed(evt);
      }
    });

    quickNode.setText("Quick Node");
    quickNode.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        quickNodeActionPerformed(evt);
      }
    });

    quickLink.setText("Quick Link");
    quickLink.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        quickLinkActionPerformed(evt);
      }
    });

    quit.setText("Quit");
    quit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        quitActionPerformed(evt);
      }
    });

    shakeNode.setText("Shake");
    shakeNode.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        shakeNodeActionPerformed(evt);
      }
    });

    jLabel1.setText("Server");

    jLabel2.setText("Node");

    jLabel3.setText("Link");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(clear)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(quickNode)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(quickLink))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jLabel1)
                  .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(nodeName, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                  .addComponent(address, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)))
              .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(nodeFrom, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nodeTo, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(addLink, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(port, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
              .addComponent(addNode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(subLink, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
              .addComponent(connect, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(subNode, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(bidirected, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
          .addComponent(disconnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(quit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
          .addComponent(shakeNode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addGroup(layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jLabel1)))
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(disconnect)
                .addComponent(connect))))
          .addGroup(layout.createSequentialGroup()
            .addGap(14, 14, 14)
            .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(shakeNode)
            .addComponent(subNode)
            .addComponent(addNode))
          .addGroup(layout.createSequentialGroup()
            .addGap(3, 3, 3)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(nodeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabel2))))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(subLink)
          .addComponent(addLink)
          .addComponent(bidirected)
          .addComponent(nodeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(nodeTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel3))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(quickLink)
          .addComponent(clear)
          .addComponent(quickNode)
          .addComponent(quit))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents
  
  /**
   * Respond to mouse click on the Shake Node button by requesting that the node shakes.
   * @param evt
   */
  private void shakeNodeActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shakeNodeActionPerformed
    double theta;
    double phi;
    double magnitude;
    double x;
    double y;
    double z;

    theta = Math.random () * 2.0 * Math.PI;
    phi = Math.random () * 2.0 * Math.PI;
    magnitude = Math.random () * ARRANGESHAKESCALE;
    x = magnitude * Math.cos (phi) * Math.cos (theta);
    y = magnitude * Math.cos (phi) * Math.sin (theta);
    z = magnitude * Math.sin (phi);

    if (dlClient == null) {
      dlClient = new DlClient (address.getText (), portModel.getNumber ().intValue ());
    }
    dlClient.moveNode (nodeName.getText (), x, y, z);
  }//GEN-LAST:event_shakeNodeActionPerformed
  
    /**
     * Respond to mouse click on the Quick Link button by adding a random link.
     * @param evt
     */
    private void quickLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickLinkActionPerformed
      if (quickNodeCount > 0) {
        Integer linkFrom = (int)((float)Math.random () * quickNodeCount.floatValue ());
        Integer linkTo = (int)((float)Math.random () * quickNodeCount.floatValue ());
        
        if (bidirected.isSelected ()) {
          dlClient.addLinkBi (linkFrom.toString (), linkTo.toString ());
        } else {
          dlClient.addLink (linkFrom.toString (), linkTo.toString ());
        }
      }
    }//GEN-LAST:event_quickLinkActionPerformed
    
    /**
     * Respond to mouse click on the Quick Node button by adding a node with incrementing numerical name
     * @param evt
     */
    private void quickNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickNodeActionPerformed
      if (dlClient == null) {
        dlClient = new DlClient (address.getText (), portModel.getNumber ().intValue ());
      }
      dlClient.addNode (quickNodeCount.toString ());
      if (quickNodeCount > 0) {
        Integer link = (int)((float)Math.random () * quickNodeCount.floatValue ());
        if (bidirected.isSelected ()) {
          dlClient.addLinkBi (link.toString (), quickNodeCount.toString ());
        } else {
          dlClient.addLink (link.toString (), quickNodeCount.toString ());
        }
      }
      quickNodeCount++;
    }//GEN-LAST:event_quickNodeActionPerformed
    
    /**
     * Respond to mouse click on the Quit button by exiting the application
     * @param evt
     */
    private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
      System.exit (0);
    }//GEN-LAST:event_quitActionPerformed
    
    /**
     * Respond to mouse click on the Clear button by clearing the network topology
     * @param evt
     */
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
      if (dlClient == null) {
        dlClient = new DlClient (address.getText (), portModel.getNumber ().intValue ());
      }
      dlClient.clear ();
      quickNodeCount = 0;
    }//GEN-LAST:event_clearActionPerformed
    
    /**
     * Respond to mouse click on the Remove Link button by removing the link between the two named nodes
     * @param evt
     */
    private void subLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subLinkActionPerformed
      if (dlClient == null) {
        dlClient = new DlClient (address.getText (), portModel.getNumber ().intValue ());
      }
      if (bidirected.isSelected ()) {
        dlClient.subLinkBi (nodeFrom.getText (), nodeTo.getText ());
      } else {
        dlClient.subLink (nodeFrom.getText (), nodeTo.getText ());
      }
    }//GEN-LAST:event_subLinkActionPerformed
    
    /**
     * Respond to mouse click on the Add Link button by adding the link between the two named nodes
     * @param evt
     */
    private void addLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLinkActionPerformed
      if (dlClient == null) {
        dlClient = new DlClient (address.getText (), portModel.getNumber ().intValue ());
      }
      if (bidirected.isSelected ()) {
        dlClient.addLinkBi (nodeFrom.getText (), nodeTo.getText ());
      } else {
        dlClient.addLink (nodeFrom.getText (), nodeTo.getText ());
      }
    }//GEN-LAST:event_addLinkActionPerformed
    
    /**
     * Respond to mouse click on the Remove Node button by removing the named node
     * @param evt
     */
    private void subNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subNodeActionPerformed
      if (dlClient == null) {
        dlClient = new DlClient (address.getText (), portModel.getNumber ().intValue ());
      }
      dlClient.subNode (nodeName.getText ());
    }//GEN-LAST:event_subNodeActionPerformed
    
    /**
     * Respond to mouse click on the Add Node button by adding a node with the given name
     * @param evt
     */
    private void addNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNodeActionPerformed
      if (dlClient == null) {
        dlClient = new DlClient (address.getText (), portModel.getNumber ().intValue ());
      }
      dlClient.addNode (nodeName.getText ());
    }//GEN-LAST:event_addNodeActionPerformed
    
    /**
     * Respond to mouse click on the Disconnect button by disconnecting from the Dandelion server
     * @param evt
     */
    private void disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectActionPerformed
      if (dlClient != null) {
        dlClient.quit ();
        dlClient = null;
      }
    }//GEN-LAST:event_disconnectActionPerformed
    
    /**
     * Respond to mouse click on the Connect button by initiating a connection to the Dandelion server
     * @param evt
     */
    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
      if (dlClient == null) {
        dlClient = new DlClient (address.getText (), portModel.getNumber ().intValue ());
      }
    }//GEN-LAST:event_connectActionPerformed
    
    /**
     * Start up the main DandeClient application.
     * @param args the command line arguments
     */
    public static void main (String args[]) {
      java.awt.EventQueue.invokeLater (new Runnable () {
        public void run () {
          new DandeClient ().setVisible (true);
        }
      });
    }
    
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addLink;
  private javax.swing.JButton addNode;
  private javax.swing.JTextField address;
  private javax.swing.JCheckBox bidirected;
  private javax.swing.JButton clear;
  private javax.swing.JButton connect;
  private javax.swing.JButton disconnect;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JTextField nodeFrom;
  private javax.swing.JTextField nodeName;
  private javax.swing.JTextField nodeTo;
  private javax.swing.JSpinner port;
  private javax.swing.JButton quickLink;
  private javax.swing.JButton quickNode;
  private javax.swing.JButton quit;
  private javax.swing.JButton shakeNode;
  private javax.swing.JButton subLink;
  private javax.swing.JButton subNode;
  // End of variables declaration//GEN-END:variables
  
}
